{
	"info": {
		"_postman_id": "b1f0b760-16eb-456a-a1db-bcf2859c3bee",
		"name": "ms-votacao-pauta",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28830753"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create-Multiple-User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera nome aleat√≥rio",
									"const nomes = ['Jo√£o', 'Maria', 'Pedro', 'Ana', 'Carlos', 'Lucia', 'Rafael', 'Beatriz'];",
									"const sobrenomes = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Lima', 'Pereira'];",
									"",
									"const nome = nomes[Math.floor(Math.random() * nomes.length)];",
									"const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];",
									"",
									"// Gera CPF √∫nico (11 d√≠gitos)",
									"const cpf = Math.floor(Math.random() * 90000000000) + 10000000000;",
									"",
									"pm.globals.set(\"userName\", nome + \" \" + sobrenome);",
									"pm.globals.set(\"userCPF\", cpf.toString());",
									"",
									"console.log(\"Criando usu√°rio:\", nome + \" \" + sobrenome, \"CPF:\", cpf);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica se deu certo",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    const userId = response.userId;",
									"    ",
									"    // Pega lista atual de IDs",
									"    let userIds = pm.collectionVariables.get(\"userIds\") || \"[]\";",
									"    userIds = JSON.parse(userIds);",
									"    ",
									"    // Adiciona novo ID",
									"    userIds.push(userId);",
									"    ",
									"    // Salva lista atualizada",
									"    pm.collectionVariables.set(\"userIds\", JSON.stringify(userIds));",
									"    ",
									"    console.log(`‚úÖ Usu√°rio ${userIds.length} criado: ${userId}`);",
									"} else {",
									"    console.log(\"‚ùå Erro ao criar usu√°rio:\", pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userName\": \"{{userName}}\",\n  \"userCPF\": \"{{userCPF}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:2500/user/create-user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2500",
							"path": [
								"user",
								"create-user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create-One-User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"votingId\" : \"Suelen B\",\n  \"userCPF\" : \"45632178965\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:2500/api/votacao/user/v1/create-user",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2500",
							"path": [
								"api",
								"votacao",
								"user",
								"v1",
								"create-user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Voting",
			"item": [
				{
					"name": "Create-voting",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"subject\": \"Vota√ß√£o testando carga\",\n    \"userDefinedExpirationDate\" : \"4\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:2500/api/votacao/voting/v1/create-voting",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2500",
							"path": [
								"api",
								"votacao",
								"voting",
								"v1",
								"create-voting"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Vote",
			"item": [
				{
					"name": "Vote",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"6896a6287f6a8d8bc9aa7499\",\n  \"voteOption\" : \"Sim\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:2500/vote/6898ff38e855e877c1127394",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2500",
							"path": [
								"vote",
								"6898ff38e855e877c1127394"
							]
						}
					},
					"response": []
				},
				{
					"name": "Vote-Multi",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Pega todos os userIds criados",
									"let userIds = pm.collectionVariables.get(\"userIds\") || \"[]\";",
									"userIds = JSON.parse(userIds);",
									"",
									"if (userIds.length === 0) {",
									"    console.log(\"‚ùå Nenhum usu√°rio encontrado!\");",
									"    return;",
									"}",
									"",
									"// Seleciona aleatoriamente",
									"const randomUserId = userIds[Math.floor(Math.random() * userIds.length)];",
									"const voteOptions = [\"SIM\", \"NAO\"];",
									"const randomVote = voteOptions[Math.floor(Math.random() * voteOptions.length)];",
									"",
									"pm.globals.set(\"selectedUserId\", randomUserId);",
									"pm.globals.set(\"selectedVoteOption\", randomVote);",
									"",
									"console.log(`üó≥Ô∏è UserID: ${randomUserId}, Voto: ${randomVote}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    console.log(\"‚úÖ Voto registrado!\");",
									"} else {",
									"    console.log(\"‚ùå Erro:\", pm.response.text());",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{selectedUserId}}\",\n  \"voteOption\": \"{{selectedVoteOption}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:2500/api/votacao/v1/vote/6899504c8175afcbc9a5b0f3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2500",
							"path": [
								"api",
								"votacao",
								"v1",
								"vote",
								"6899504c8175afcbc9a5b0f3"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health-check",
			"item": [
				{
					"name": "health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:2500/api/actuator/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2500",
							"path": [
								"api",
								"actuator",
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Result",
			"item": [
				{
					"name": "Check-result",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:2500/api/v1/result/6898f183b6518267ea09eed3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2500",
							"path": [
								"api",
								"v1",
								"result",
								"6898f183b6518267ea09eed3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check-Result-Exists",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:2500/result/68980482912e7724a29ae522/exists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2500",
							"path": [
								"result",
								"68980482912e7724a29ae522",
								"exists"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Swagger",
			"item": [
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:2500/swagger-ui.html",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2500",
							"path": [
								"swagger-ui.html"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "userIds",
			"value": ""
		}
	]
}