{
	"info": {
		"_postman_id": "a5270111-e104-4d05-b2c3-0656d0f08775",
		"name": "Desafio Vota√ß√£o-DOCKER",
		"description": "Collection para testar os End-points das api de vota√ß√£o de pautas para cooperativas.\n\nEsta API foi desenvolvida para agilizar a vota√ß√£o de pautas em ass√©mbleias.\n\n- O Swagger pode ser consultado em:\n    \n    - localhost:2500/api/votacao/swagger-ui.html\n        \n    - Lembre-se de rodar a aplica√ß√£o!!\n        \n\nPara no docker use: http:localhost:30000/api/votacao",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28830753"
	},
	"item": [
		{
			"name": "MS-VOTACAO",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Create-single-user",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userName\" : \" \",\n  \"userCPF\" : \" \"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:30000/api/votacao/user/v1/create-user",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "30000",
									"path": [
										"api",
										"votacao",
										"user",
										"v1",
										"create-user"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create-Multi-User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Gera nome aleat√≥rio",
											"const nomes = ['Jo√£o', 'Maria', 'Pedro', 'Ana', 'Carlos', 'Lucia', 'Rafael', 'Beatriz'];",
											"const sobrenomes = ['Silva', 'Santos', 'Oliveira', 'Souza', 'Lima', 'Pereira'];",
											"",
											"const nome = nomes[Math.floor(Math.random() * nomes.length)];",
											"const sobrenome = sobrenomes[Math.floor(Math.random() * sobrenomes.length)];",
											"",
											"// Gera CPF √∫nico (11 d√≠gitos)",
											"const cpf = Math.floor(Math.random() * 90000000000) + 10000000000;",
											"",
											"pm.globals.set(\"userName\", nome + \" \" + sobrenome);",
											"pm.globals.set(\"userCPF\", cpf.toString());",
											"",
											"console.log(\"Criando usu√°rio:\", nome + \" \" + sobrenome, \"CPF:\", cpf);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Verifica se deu certo",
											"if (pm.response.code === 200 || pm.response.code === 201) {",
											"    const response = pm.response.json();",
											"    const userId = response.userId;",
											"    ",
											"    // Pega lista atual de IDs",
											"    let userIds = pm.collectionVariables.get(\"userIds\") || \"[]\";",
											"    userIds = JSON.parse(userIds);",
											"    ",
											"    // Adiciona novo ID",
											"    userIds.push(userId);",
											"    ",
											"    // Salva lista atualizada",
											"    pm.collectionVariables.set(\"userIds\", JSON.stringify(userIds));",
											"    ",
											"    console.log(`‚úÖ Usu√°rio ${userIds.length} criado: ${userId}`);",
											"} else {",
											"    console.log(\"‚ùå Erro ao criar usu√°rio:\", pm.response.text());",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userName\": \"{{userName}}\",\n  \"userCPF\": \"{{userCPF}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:30000/api/votacao/user/v1/create-user",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "30000",
									"path": [
										"api",
										"votacao",
										"user",
										"v1",
										"create-user"
									]
								}
							},
							"response": []
						}
					],
					"description": "Nesta pasta est√£o os end-points para o controller de User\n\nExistem dois end-poins para User.\n\n- Create-single-user\n    \n    - Cria um usu√°rio por vez cada vez que √© acionado.\n        \n- Create-Multi-user\n    \n    - Cria multiplos usu√°rios, de acordo com a forma √© rodada a Collection. Ajuda para popular o banco com muitos usu√°rios.\n        \n\nO Body da requisi√ß√£o deve ser:\n\n{\n\n\"userName\" : \" \",\n\n\"userCPF\" : \" \"\n\n}\n\nNome de usu√°rio e CPF\n\n- N√£o se pode cadastrar o mesmo CPF duas vezes.\n    \n\n## **Passos para usar Multi-user**\n\n1. Crie uma nova variavel no Postman\n    \n    1. Ela deve ser userIds, default, \\[\\], \\[\\]\n        \n2. Clique no nome da Collection MS-VOTACAO\n    \n3. Clique em \"Run\" (quadradinho com um bot√£o de \"Play\")\n    \n4. Selecione o request Create-Multi-user\n    \n5. No campo Interations coloque a quantidade de requisi√ß√µes que queira fazer.\n    \n    1. Voc√™ pode definir um tempo de delay para ter um intervalo em cada requisi√ß√£o.\n        \n6. Clique no bot√£o Laranja escrito RUN DESAFIO VOTACAO para iniciar\n    \n\nAs requisi√ß√µes ser√£o salvas na variavel userIds e facilitaram o uso das requisi√ß√µes de Voto."
				},
				{
					"name": "Voting",
					"item": [
						{
							"name": "Create-Voting",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"subject\": \" \",\n    \"userDefinedExpirationDate\" : \" \"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:30000/api/votacao/voting/v1/create-voting",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "30000",
									"path": [
										"api",
										"votacao",
										"voting",
										"v1",
										"create-voting"
									]
								}
							},
							"response": []
						}
					],
					"description": "Nesta pasta est√£o os end-poins para o controller Vote\n\nExiste apenas um end-point para Voting o de cria√ß√£o de vota√ß√£o.\n\nO body da requisi√ß√£o √© assim:\n\n{\n\n\"subject\": \" \",\n\n\"userDefinedExpirationDate\" : \" \"\n\n}\n\nPauta da vota√ß√£o e o tempo de expira√ß√£o"
				},
				{
					"name": "Vote",
					"item": [
						{
							"name": "Create-Single-Vote",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": \" \",\n  \"voteOption\" : \" \"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:30000/api/votacao/v1/vote/6899504c8175afcbc9a5b0f3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "30000",
									"path": [
										"api",
										"votacao",
										"v1",
										"vote",
										"6899504c8175afcbc9a5b0f3"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create-Multi-vote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Pega todos os userIds criados",
											"let userIds = pm.collectionVariables.get(\"userIds\") || \"[]\";",
											"userIds = JSON.parse(userIds);",
											"",
											"if (userIds.length === 0) {",
											"    console.log(\"‚ùå Nenhum usu√°rio encontrado!\");",
											"    return;",
											"}",
											"",
											"// Seleciona aleatoriamente",
											"const randomUserId = userIds[Math.floor(Math.random() * userIds.length)];",
											"const voteOptions = [\"SIM\", \"NAO\"];",
											"const randomVote = voteOptions[Math.floor(Math.random() * voteOptions.length)];",
											"",
											"pm.globals.set(\"selectedUserId\", randomUserId);",
											"pm.globals.set(\"selectedVoteOption\", randomVote);",
											"",
											"console.log(`üó≥Ô∏è UserID: ${randomUserId}, Voto: ${randomVote}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200 || pm.response.code === 201) {",
											"    console.log(\"‚úÖ Voto registrado!\");",
											"} else {",
											"    console.log(\"‚ùå Erro:\", pm.response.text());",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": \"{{selectedUserId}}\",\n  \"voteOption\": \"{{selectedVoteOption}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:30000/api/votacao/v1/vote/6899504c8175afcbc9a5b0f3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "30000",
									"path": [
										"api",
										"votacao",
										"v1",
										"vote",
										"6899504c8175afcbc9a5b0f3"
									]
								}
							},
							"response": []
						}
					],
					"description": "Assim como no User, existem duas requisi√ß√µes para Vote.\n\n- Create-Single-Vote\n    \n    - Que criar apenas um voto por vez\n        \n- Create-Multi-vote\n    \n    - Faz multiplas requisi√ß√µes para uma vota√ß√£o usando os usu√°rios de userIds.\n        \n\nO body √© assim:\n\n{\n\n\"userId\": \" \",\n\n\"voteOption\" : \" \"\n\n}\n\nO ID do usu√°rio que foi recebido na cria√ß√£o do usu√°rio e a op√ß√£o de vota√ß√£o sendo Sim ou Nao\n\n- N√ÉO USE ACENTOS\n    \n\n# Para usar o Multi-Vote\n\n1. PRIMEIRO RODE O CREATE-MULTI-USER\n    \n2. Clique na Collection MS-VOTACAO\n    \n3. Clique no quadradinho \"Run\"\n    \n4. Seleciona o request de multi-vote\n    \n5. Determine a quantidade de intera√ß√µes (votos) que queira fazer.\n    \n    1. Defina ou n√£o um delay em ms entre cada requisi√ß√£o"
				},
				{
					"name": "Result",
					"item": [
						{
							"name": "Check-result",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:30000/api/votacao/result/v1/<votingId>",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "30000",
									"path": [
										"api",
										"votacao",
										"result",
										"v1",
										"<votingId>"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check-Result-Exists",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:30000/api/votacao/result/v1<votingId>/exists",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "30000",
									"path": [
										"api",
										"votacao",
										"result",
										"v1<votingId>",
										"exists"
									]
								}
							},
							"response": []
						}
					],
					"description": "Nesta pasta est√£o os end-points para o controller Result\n\nExistem dois end-points para Resulto\n\n- Check-result\n    \n    - Use para ver o resultado de uma vota√ß√£o\n        \n        - Passe o votingId da vota√ß√£o desejada na requisi√ß√£o\n            \n        - Ex: http://localhost:2500/api/votacao/result/v1/\n            \n- Check-existe-vota√ß√£o\n    \n    - Use para verificar se uma vota√ß√£o j√° terminou (Tempo de expira√ß√£o acabou)\n        \n    - Passe o votingId na requisi√ß√£o antes do exists\n        \n    - Ex: http://localhost:2500/api/votacao/result//exists\n        \n\nExemplo de votingId: 6898f183b6518267ea09eed3"
				},
				{
					"name": "Swagger",
					"item": [
						{
							"name": "Swagger",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:30000/api/votacao/swagger-ui.html",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "30000",
									"path": [
										"api",
										"votacao",
										"swagger-ui.html"
									]
								}
							},
							"response": []
						}
					],
					"description": "Nesta pasta tem o end-point do Swagger.\n\nBasta copiar o endere√ßo e colar no navegador"
				},
				{
					"name": "Health-check",
					"item": [
						{
							"name": "health",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:30000/api/actuator/health",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "30000",
									"path": [
										"api",
										"actuator",
										"health"
									]
								}
							},
							"response": []
						}
					],
					"description": "Nesta pasta est√° o health check, use para certificar que a API esta no ar\n\nEla possui apenas o health check e o validador de CPF que √© consumido pelo MS-VOTA√á√ÉO"
				}
			],
			"description": "Pasta com os requests para testar os end-points da Api de vota√ß√£o."
		}
	]
}